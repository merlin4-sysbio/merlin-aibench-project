/*
Copyright 2007 Daniel Gonzalez Peña, Florentino Fernandez Riverola


This file is part the AIBench Project. 

AIBench Project is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AIBench Project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser Public License for more details.

You should have received a copy of the GNU Lesser Public License
along with AIBench Project.  If not, see <http://www.gnu.org/licenses/>.
*/

/*  
 * History.java
 * Created inside the SING research group (http://sing.ei.uvigo.es)
 * University of Vigo
 *
 * Created on 22/09/2006
 */

package es.uvigo.ei.aibench.core.history;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import es.uvigo.ei.aibench.core.Core;
import es.uvigo.ei.aibench.core.ParamSource;
import es.uvigo.ei.aibench.core.ParamSpec;
import es.uvigo.ei.aibench.core.clipboard.ClipboardItem;
import es.uvigo.ei.aibench.core.clipboard.ClipboardListener;
import es.uvigo.ei.aibench.core.operation.OperationDefinition;

/**
 * @author Daniel González Peña 22-sep-2006
 *
 */
public class History implements ClipboardListener {
	
	static Logger logger = Logger.getLogger(History.class.getName());

	private ArrayList<HistoryElement> historyElements = new ArrayList<HistoryElement>();
	private HashMap<ClipboardItem, HistoryElement> clipboardMapping = new HashMap<ClipboardItem, HistoryElement>();
	private ArrayList<HistoryListener> listeners = new ArrayList<HistoryListener>();


	boolean listeningToClipboard = false;
	public void addHistoryListener(HistoryListener listener){
		
		this.listeners.add(listener);
	}
	
	public History(){
	
		
	}
	public void putHistoryElement(ParamSpec[] params, OperationDefinition<?> operation, List<ClipboardItem> results, List<Object> portOutputs ){
		if (logger.getEffectiveLevel().equals(Level.DEBUG))logger.debug("Putting history object, output of operation: "+operation.getName());
		if(!listeningToClipboard){
			Core.getInstance().getClipboard().addClipboardListener(this);
			this.listeningToClipboard = true;
		}
		HistoryElement historyElement = new HistoryElementImpl(params, operation, results, portOutputs);

		for (ClipboardItem item : results){
			clipboardMapping.put(item, historyElement);
		}

		fireElementAdded(historyElement);
		this.historyElements.add(historyElement);

	}

	public List<HistoryElement> getHistory(){
		return this.historyElements;
	}

	public HistoryElement getSourceOfClipboardItem(ClipboardItem item){

		return this.clipboardMapping.get(item);
	}

	private void fireElementAdded(HistoryElement element){
		for (HistoryListener listener : this.listeners){
			listener.historyElementAdded(element);
		}
	}
	/* (non-Javadoc)
	 * @see es.uvigo.ei.aibench.core.clipboard.ClipboardListener#elementAdded(es.uvigo.ei.aibench.core.clipboard.ClipboardItem)
	 */
	public void elementAdded(ClipboardItem item) {
		// TODO Auto-generated method stub
		
	}
	/* (non-Javadoc)
	 * @see es.uvigo.ei.aibench.core.clipboard.ClipboardListener#elementRemoved(es.uvigo.ei.aibench.core.clipboard.ClipboardItem)
	 */
	public void elementRemoved(ClipboardItem item) {
		if (clipboardMapping.containsKey(item)){
			if (logger.getEffectiveLevel().equals(Level.DEBUG))logger.debug("removed clipboard from history mapping");
			this.clipboardMapping.remove(item);
			
			
		}
		for (HistoryElement elem: this.getHistory()){
			synchronized(elem){
				for(int i =elem.getClipboardItems().size()-1; i>=0; i--){
					if (elem.getClipboardItems().get(i)==item){
						if (logger.getEffectiveLevel().equals(Level.DEBUG))logger.debug("removed clipboard item from history");
						elem.getClipboardItems().remove(i);
					}
				}
				for(int i =elem.getOutputs().size()-1; i>=0; i--){
					if (elem.getOutputs().get(i)==item.getUserData()){
						if (logger.getEffectiveLevel().equals(Level.DEBUG))logger.debug("removed clipboard item from history output");
						elem.getOutputs().remove(i);
					}
				}
				
				for (int i = elem.getParams().length-1; i>=0; i--){
					if (elem.getParams()[i]==null) continue;
					if (elem.getParams()[i].getSource()==ParamSource.CLIPBOARD && elem.getParams()[i].getValue() == item){
						if (logger.getEffectiveLevel().equals(Level.DEBUG))logger.debug("removed clipboard item from params in history elem");
						
						
					}
					i--;
				}
			}
			
		}
		
	}
	
	/**
	 * Removes the a history element. Note: It also removes all clipboard items generated by the operation represented by this history element
	 * @param element the element to remove
	 */
	public void removeItem(HistoryElement element){
		this.historyElements.remove(element);
		for (ClipboardItem citem : element.getClipboardItems()){
			Core.getInstance().getClipboard().removeClipboardItem(citem);
		}
		for (HistoryListener listener : this.listeners){
			listener.historyElementRemoved(element);
		}
	}
}


class HistoryElementImpl implements HistoryElement {
	private ParamSpec[] params;
	private OperationDefinition<?> operation;
	private List<ClipboardItem> results;
	private List<Object> portOuputs;
	/**
	 * @return Returns the operation.
	 */
	public OperationDefinition<?> getOperation() {
		return this.operation;
		
	}
	/**
	 * @return Returns the params.
	 */
	public ParamSpec[] getParams() {
		return this.params;
	}
	/**
	 * @return Returns the results.
	 */
	public List<ClipboardItem> getClipboardItems() {
		
		return this.results;
	}

	public List<Object> getOutputs() {
		
		return this.portOuputs;
	}
	/**
	 * @param params
	 * @param operation
	 * @param results
	 */
	public HistoryElementImpl(ParamSpec[] params, OperationDefinition<?> operation, List<ClipboardItem> results, List<Object> portOuputs) {
		this.params = params;
		this.operation = operation;
		this.results = results;
		this.portOuputs=portOuputs;
	}
	

}